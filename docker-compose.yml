version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    container_name: hustler-postgres
    environment:
      POSTGRES_DB: hustler_db
      POSTGRES_USER: hustler
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hustler -d hustler_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hustler-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: hustler-backend
    environment:
      - DATABASE_URL=postgresql://hustler:${POSTGRES_PASSWORD:-securepassword}@postgres:5432/hustler_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispassword}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - BITGET_API_KEY=${BITGET_API_KEY}
      - BITGET_SECRET_KEY=${BITGET_SECRET_KEY}
      - BITGET_PASSPHRASE=${BITGET_PASSPHRASE}
      - BITGET_SANDBOX=${BITGET_SANDBOX:-true}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - DEBUG=${DEBUG:-false}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: hustler-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WS_URL=ws://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: hustler-nginx
    volumes:
      - ./docker/nginx-prod.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles: ["production"]

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: hustler-network
